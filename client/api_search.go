/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package client

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// SearchApiService SearchApi service
type SearchApiService service

// GetOpts Optional parameters for the method 'Get'
type GetOpts struct {
    StartIndex optional.Int32
    Limit optional.Int32
    UserId optional.Interface
    IncludeItemTypes optional.String
    ExcludeItemTypes optional.String
    MediaTypes optional.String
    ParentId optional.String
    IsMovie optional.Bool
    IsSeries optional.Bool
    IsNews optional.Bool
    IsKids optional.Bool
    IsSports optional.Bool
    IncludePeople optional.Bool
    IncludeMedia optional.Bool
    IncludeGenres optional.Bool
    IncludeStudios optional.Bool
    IncludeArtists optional.Bool
}

/*
Get Gets the search hint result.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param searchTerm The search term to filter on.
 * @param optional nil or *GetOpts - Optional Parameters:
 * @param "StartIndex" (optional.Int32) -  Optional. The record index to start at. All items with a lower index will be dropped from the results.
 * @param "Limit" (optional.Int32) -  Optional. The maximum number of records to return.
 * @param "UserId" (optional.Interface of string) -  Optional. Supply a user id to search within a user's library or omit to search all.
 * @param "IncludeItemTypes" (optional.String) -  If specified, only results with the specified item types are returned. This allows multiple, comma delimeted.
 * @param "ExcludeItemTypes" (optional.String) -  If specified, results with these item types are filtered out. This allows multiple, comma delimeted.
 * @param "MediaTypes" (optional.String) -  If specified, only results with the specified media types are returned. This allows multiple, comma delimeted.
 * @param "ParentId" (optional.String) -  If specified, only children of the parent are returned.
 * @param "IsMovie" (optional.Bool) -  Optional filter for movies.
 * @param "IsSeries" (optional.Bool) -  Optional filter for series.
 * @param "IsNews" (optional.Bool) -  Optional filter for news.
 * @param "IsKids" (optional.Bool) -  Optional filter for kids.
 * @param "IsSports" (optional.Bool) -  Optional filter for sports.
 * @param "IncludePeople" (optional.Bool) -  Optional filter whether to include people.
 * @param "IncludeMedia" (optional.Bool) -  Optional filter whether to include media.
 * @param "IncludeGenres" (optional.Bool) -  Optional filter whether to include genres.
 * @param "IncludeStudios" (optional.Bool) -  Optional filter whether to include studios.
 * @param "IncludeArtists" (optional.Bool) -  Optional filter whether to include artists.
@return SearchHintResult
*/
func (a *SearchApiService) Get(ctx _context.Context, searchTerm string, localVarOptionals *GetOpts) (SearchHintResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SearchHintResult
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/Search/Hints"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.StartIndex.IsSet() {
		localVarQueryParams.Add("startIndex", parameterToString(localVarOptionals.StartIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UserId.IsSet() {
		localVarQueryParams.Add("userId", parameterToString(localVarOptionals.UserId.Value(), ""))
	}
	localVarQueryParams.Add("searchTerm", parameterToString(searchTerm, ""))
	if localVarOptionals != nil && localVarOptionals.IncludeItemTypes.IsSet() {
		localVarQueryParams.Add("includeItemTypes", parameterToString(localVarOptionals.IncludeItemTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeItemTypes.IsSet() {
		localVarQueryParams.Add("excludeItemTypes", parameterToString(localVarOptionals.ExcludeItemTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MediaTypes.IsSet() {
		localVarQueryParams.Add("mediaTypes", parameterToString(localVarOptionals.MediaTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParentId.IsSet() {
		localVarQueryParams.Add("parentId", parameterToString(localVarOptionals.ParentId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsMovie.IsSet() {
		localVarQueryParams.Add("isMovie", parameterToString(localVarOptionals.IsMovie.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsSeries.IsSet() {
		localVarQueryParams.Add("isSeries", parameterToString(localVarOptionals.IsSeries.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsNews.IsSet() {
		localVarQueryParams.Add("isNews", parameterToString(localVarOptionals.IsNews.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsKids.IsSet() {
		localVarQueryParams.Add("isKids", parameterToString(localVarOptionals.IsKids.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsSports.IsSet() {
		localVarQueryParams.Add("isSports", parameterToString(localVarOptionals.IsSports.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludePeople.IsSet() {
		localVarQueryParams.Add("includePeople", parameterToString(localVarOptionals.IncludePeople.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeMedia.IsSet() {
		localVarQueryParams.Add("includeMedia", parameterToString(localVarOptionals.IncludeMedia.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeGenres.IsSet() {
		localVarQueryParams.Add("includeGenres", parameterToString(localVarOptionals.IncludeGenres.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeStudios.IsSet() {
		localVarQueryParams.Add("includeStudios", parameterToString(localVarOptionals.IncludeStudios.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeArtists.IsSet() {
		localVarQueryParams.Add("includeArtists", parameterToString(localVarOptionals.IncludeArtists.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-Emby-Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
