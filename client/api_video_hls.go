/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package client

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"os"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// VideoHlsApiService VideoHlsApi service
type VideoHlsApiService service

// GetLiveHlsStreamOpts Optional parameters for the method 'GetLiveHlsStream'
type GetLiveHlsStreamOpts struct {
    Container optional.String
    Static optional.Bool
    Params optional.String
    Tag optional.String
    DeviceProfileId optional.String
    PlaySessionId optional.String
    SegmentContainer optional.String
    SegmentLength optional.Int32
    MinSegments optional.Int32
    MediaSourceId optional.String
    DeviceId optional.String
    AudioCodec optional.String
    EnableAutoStreamCopy optional.Bool
    AllowVideoStreamCopy optional.Bool
    AllowAudioStreamCopy optional.Bool
    BreakOnNonKeyFrames optional.Bool
    AudioSampleRate optional.Int32
    MaxAudioBitDepth optional.Int32
    AudioBitRate optional.Int32
    AudioChannels optional.Int32
    MaxAudioChannels optional.Int32
    Profile optional.String
    Level optional.String
    Framerate optional.Float32
    MaxFramerate optional.Float32
    CopyTimestamps optional.Bool
    StartTimeTicks optional.Int64
    Width optional.Int32
    Height optional.Int32
    VideoBitRate optional.Int32
    SubtitleStreamIndex optional.Int32
    SubtitleMethod optional.Interface
    MaxRefFrames optional.Int32
    MaxVideoBitDepth optional.Int32
    RequireAvc optional.Bool
    DeInterlace optional.Bool
    RequireNonAnamorphic optional.Bool
    TranscodingMaxAudioChannels optional.Int32
    CpuCoreLimit optional.Int32
    LiveStreamId optional.String
    EnableMpegtsM2TsMode optional.Bool
    VideoCodec optional.String
    SubtitleCodec optional.String
    TranscodingReasons optional.String
    AudioStreamIndex optional.Int32
    VideoStreamIndex optional.Int32
    Context optional.Interface
    StreamOptions optional.Interface
    MaxWidth optional.Int32
    MaxHeight optional.Int32
    EnableSubtitlesInManifest optional.Bool
}

/*
GetLiveHlsStream Gets a hls live stream.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param itemId The item id.
 * @param optional nil or *GetLiveHlsStreamOpts - Optional Parameters:
 * @param "Container" (optional.String) -  The audio container.
 * @param "Static" (optional.Bool) -  Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
 * @param "Params" (optional.String) -  The streaming parameters.
 * @param "Tag" (optional.String) -  The tag.
 * @param "DeviceProfileId" (optional.String) -  Optional. The dlna device profile id to utilize.
 * @param "PlaySessionId" (optional.String) -  The play session id.
 * @param "SegmentContainer" (optional.String) -  The segment container.
 * @param "SegmentLength" (optional.Int32) -  The segment lenght.
 * @param "MinSegments" (optional.Int32) -  The minimum number of segments.
 * @param "MediaSourceId" (optional.String) -  The media version id, if playing an alternate version.
 * @param "DeviceId" (optional.String) -  The device id of the client requesting. Used to stop encoding processes when needed.
 * @param "AudioCodec" (optional.String) -  Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
 * @param "EnableAutoStreamCopy" (optional.Bool) -  Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
 * @param "AllowVideoStreamCopy" (optional.Bool) -  Whether or not to allow copying of the video stream url.
 * @param "AllowAudioStreamCopy" (optional.Bool) -  Whether or not to allow copying of the audio stream url.
 * @param "BreakOnNonKeyFrames" (optional.Bool) -  Optional. Whether to break on non key frames.
 * @param "AudioSampleRate" (optional.Int32) -  Optional. Specify a specific audio sample rate, e.g. 44100.
 * @param "MaxAudioBitDepth" (optional.Int32) -  Optional. The maximum audio bit depth.
 * @param "AudioBitRate" (optional.Int32) -  Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
 * @param "AudioChannels" (optional.Int32) -  Optional. Specify a specific number of audio channels to encode to, e.g. 2.
 * @param "MaxAudioChannels" (optional.Int32) -  Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
 * @param "Profile" (optional.String) -  Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
 * @param "Level" (optional.String) -  Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
 * @param "Framerate" (optional.Float32) -  Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
 * @param "MaxFramerate" (optional.Float32) -  Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
 * @param "CopyTimestamps" (optional.Bool) -  Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
 * @param "StartTimeTicks" (optional.Int64) -  Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.
 * @param "Width" (optional.Int32) -  Optional. The fixed horizontal resolution of the encoded video.
 * @param "Height" (optional.Int32) -  Optional. The fixed vertical resolution of the encoded video.
 * @param "VideoBitRate" (optional.Int32) -  Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
 * @param "SubtitleStreamIndex" (optional.Int32) -  Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
 * @param "SubtitleMethod" (optional.Interface of SubtitleDeliveryMethod) -  Optional. Specify the subtitle delivery method.
 * @param "MaxRefFrames" (optional.Int32) -  Optional.
 * @param "MaxVideoBitDepth" (optional.Int32) -  Optional. The maximum video bit depth.
 * @param "RequireAvc" (optional.Bool) -  Optional. Whether to require avc.
 * @param "DeInterlace" (optional.Bool) -  Optional. Whether to deinterlace the video.
 * @param "RequireNonAnamorphic" (optional.Bool) -  Optional. Whether to require a non anamporphic stream.
 * @param "TranscodingMaxAudioChannels" (optional.Int32) -  Optional. The maximum number of audio channels to transcode.
 * @param "CpuCoreLimit" (optional.Int32) -  Optional. The limit of how many cpu cores to use.
 * @param "LiveStreamId" (optional.String) -  The live stream id.
 * @param "EnableMpegtsM2TsMode" (optional.Bool) -  Optional. Whether to enable the MpegtsM2Ts mode.
 * @param "VideoCodec" (optional.String) -  Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
 * @param "SubtitleCodec" (optional.String) -  Optional. Specify a subtitle codec to encode to.
 * @param "TranscodingReasons" (optional.String) -  Optional. The transcoding reason.
 * @param "AudioStreamIndex" (optional.Int32) -  Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
 * @param "VideoStreamIndex" (optional.Int32) -  Optional. The index of the video stream to use. If omitted the first video stream will be used.
 * @param "Context" (optional.Interface of EncodingContext) -  Optional. The MediaBrowser.Model.Dlna.EncodingContext.
 * @param "StreamOptions" (optional.Interface of map[string]string) -  Optional. The streaming options.
 * @param "MaxWidth" (optional.Int32) -  Optional. The max width.
 * @param "MaxHeight" (optional.Int32) -  Optional. The max height.
 * @param "EnableSubtitlesInManifest" (optional.Bool) -  Optional. Whether to enable subtitles in the manifest.
@return *os.File
*/
func (a *VideoHlsApiService) GetLiveHlsStream(ctx _context.Context, itemId string, localVarOptionals *GetLiveHlsStreamOpts) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/Videos/{itemId}/live.m3u8"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", _neturl.QueryEscape(parameterToString(itemId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Container.IsSet() {
		localVarQueryParams.Add("container", parameterToString(localVarOptionals.Container.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Static.IsSet() {
		localVarQueryParams.Add("static", parameterToString(localVarOptionals.Static.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Params.IsSet() {
		localVarQueryParams.Add("params", parameterToString(localVarOptionals.Params.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Tag.IsSet() {
		localVarQueryParams.Add("tag", parameterToString(localVarOptionals.Tag.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DeviceProfileId.IsSet() {
		localVarQueryParams.Add("deviceProfileId", parameterToString(localVarOptionals.DeviceProfileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PlaySessionId.IsSet() {
		localVarQueryParams.Add("playSessionId", parameterToString(localVarOptionals.PlaySessionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SegmentContainer.IsSet() {
		localVarQueryParams.Add("segmentContainer", parameterToString(localVarOptionals.SegmentContainer.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SegmentLength.IsSet() {
		localVarQueryParams.Add("segmentLength", parameterToString(localVarOptionals.SegmentLength.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinSegments.IsSet() {
		localVarQueryParams.Add("minSegments", parameterToString(localVarOptionals.MinSegments.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MediaSourceId.IsSet() {
		localVarQueryParams.Add("mediaSourceId", parameterToString(localVarOptionals.MediaSourceId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DeviceId.IsSet() {
		localVarQueryParams.Add("deviceId", parameterToString(localVarOptionals.DeviceId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AudioCodec.IsSet() {
		localVarQueryParams.Add("audioCodec", parameterToString(localVarOptionals.AudioCodec.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EnableAutoStreamCopy.IsSet() {
		localVarQueryParams.Add("enableAutoStreamCopy", parameterToString(localVarOptionals.EnableAutoStreamCopy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AllowVideoStreamCopy.IsSet() {
		localVarQueryParams.Add("allowVideoStreamCopy", parameterToString(localVarOptionals.AllowVideoStreamCopy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AllowAudioStreamCopy.IsSet() {
		localVarQueryParams.Add("allowAudioStreamCopy", parameterToString(localVarOptionals.AllowAudioStreamCopy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BreakOnNonKeyFrames.IsSet() {
		localVarQueryParams.Add("breakOnNonKeyFrames", parameterToString(localVarOptionals.BreakOnNonKeyFrames.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AudioSampleRate.IsSet() {
		localVarQueryParams.Add("audioSampleRate", parameterToString(localVarOptionals.AudioSampleRate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxAudioBitDepth.IsSet() {
		localVarQueryParams.Add("maxAudioBitDepth", parameterToString(localVarOptionals.MaxAudioBitDepth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AudioBitRate.IsSet() {
		localVarQueryParams.Add("audioBitRate", parameterToString(localVarOptionals.AudioBitRate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AudioChannels.IsSet() {
		localVarQueryParams.Add("audioChannels", parameterToString(localVarOptionals.AudioChannels.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxAudioChannels.IsSet() {
		localVarQueryParams.Add("maxAudioChannels", parameterToString(localVarOptionals.MaxAudioChannels.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Profile.IsSet() {
		localVarQueryParams.Add("profile", parameterToString(localVarOptionals.Profile.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Level.IsSet() {
		localVarQueryParams.Add("level", parameterToString(localVarOptionals.Level.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Framerate.IsSet() {
		localVarQueryParams.Add("framerate", parameterToString(localVarOptionals.Framerate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxFramerate.IsSet() {
		localVarQueryParams.Add("maxFramerate", parameterToString(localVarOptionals.MaxFramerate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CopyTimestamps.IsSet() {
		localVarQueryParams.Add("copyTimestamps", parameterToString(localVarOptionals.CopyTimestamps.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartTimeTicks.IsSet() {
		localVarQueryParams.Add("startTimeTicks", parameterToString(localVarOptionals.StartTimeTicks.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VideoBitRate.IsSet() {
		localVarQueryParams.Add("videoBitRate", parameterToString(localVarOptionals.VideoBitRate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubtitleStreamIndex.IsSet() {
		localVarQueryParams.Add("subtitleStreamIndex", parameterToString(localVarOptionals.SubtitleStreamIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubtitleMethod.IsSet() {
		localVarQueryParams.Add("subtitleMethod", parameterToString(localVarOptionals.SubtitleMethod.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxRefFrames.IsSet() {
		localVarQueryParams.Add("maxRefFrames", parameterToString(localVarOptionals.MaxRefFrames.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVideoBitDepth.IsSet() {
		localVarQueryParams.Add("maxVideoBitDepth", parameterToString(localVarOptionals.MaxVideoBitDepth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RequireAvc.IsSet() {
		localVarQueryParams.Add("requireAvc", parameterToString(localVarOptionals.RequireAvc.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DeInterlace.IsSet() {
		localVarQueryParams.Add("deInterlace", parameterToString(localVarOptionals.DeInterlace.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RequireNonAnamorphic.IsSet() {
		localVarQueryParams.Add("requireNonAnamorphic", parameterToString(localVarOptionals.RequireNonAnamorphic.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TranscodingMaxAudioChannels.IsSet() {
		localVarQueryParams.Add("transcodingMaxAudioChannels", parameterToString(localVarOptionals.TranscodingMaxAudioChannels.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CpuCoreLimit.IsSet() {
		localVarQueryParams.Add("cpuCoreLimit", parameterToString(localVarOptionals.CpuCoreLimit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LiveStreamId.IsSet() {
		localVarQueryParams.Add("liveStreamId", parameterToString(localVarOptionals.LiveStreamId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EnableMpegtsM2TsMode.IsSet() {
		localVarQueryParams.Add("enableMpegtsM2TsMode", parameterToString(localVarOptionals.EnableMpegtsM2TsMode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VideoCodec.IsSet() {
		localVarQueryParams.Add("videoCodec", parameterToString(localVarOptionals.VideoCodec.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubtitleCodec.IsSet() {
		localVarQueryParams.Add("subtitleCodec", parameterToString(localVarOptionals.SubtitleCodec.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TranscodingReasons.IsSet() {
		localVarQueryParams.Add("transcodingReasons", parameterToString(localVarOptionals.TranscodingReasons.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AudioStreamIndex.IsSet() {
		localVarQueryParams.Add("audioStreamIndex", parameterToString(localVarOptionals.AudioStreamIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VideoStreamIndex.IsSet() {
		localVarQueryParams.Add("videoStreamIndex", parameterToString(localVarOptionals.VideoStreamIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Context.IsSet() {
		localVarQueryParams.Add("context", parameterToString(localVarOptionals.Context.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StreamOptions.IsSet() {
		localVarQueryParams.Add("streamOptions", parameterToString(localVarOptionals.StreamOptions.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxWidth.IsSet() {
		localVarQueryParams.Add("maxWidth", parameterToString(localVarOptionals.MaxWidth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxHeight.IsSet() {
		localVarQueryParams.Add("maxHeight", parameterToString(localVarOptionals.MaxHeight.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EnableSubtitlesInManifest.IsSet() {
		localVarQueryParams.Add("enableSubtitlesInManifest", parameterToString(localVarOptionals.EnableSubtitlesInManifest.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/x-mpegURL"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-Emby-Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
