/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package client

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"os"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// MediaInfoApiService MediaInfoApi service
type MediaInfoApiService service

/*
CloseLiveStream Closes a media source.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param liveStreamId The livestream id.
*/
func (a *MediaInfoApiService) CloseLiveStream(ctx _context.Context, liveStreamId string) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/LiveStreams/Close"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("liveStreamId", parameterToString(liveStreamId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-Emby-Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

// GetBitrateTestBytesOpts Optional parameters for the method 'GetBitrateTestBytes'
type GetBitrateTestBytesOpts struct {
    Size optional.Int32
}

/*
GetBitrateTestBytes Tests the network with a request with the size of the bitrate.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *GetBitrateTestBytesOpts - Optional Parameters:
 * @param "Size" (optional.Int32) -  The bitrate. Defaults to 102400.
@return *os.File
*/
func (a *MediaInfoApiService) GetBitrateTestBytes(ctx _context.Context, localVarOptionals *GetBitrateTestBytesOpts) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/Playback/BitrateTest"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-Emby-Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GetPlaybackInfo Gets live playback media info for an item.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param itemId The item id.
 * @param userId The user id.
@return PlaybackInfoResponse
*/
func (a *MediaInfoApiService) GetPlaybackInfo(ctx _context.Context, itemId string, userId string) (PlaybackInfoResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PlaybackInfoResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/Items/{itemId}/PlaybackInfo"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", _neturl.QueryEscape(parameterToString(itemId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("userId", parameterToString(userId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-Emby-Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GetPostedPlaybackInfoOpts Optional parameters for the method 'GetPostedPlaybackInfo'
type GetPostedPlaybackInfoOpts struct {
    UserId optional.Interface
    MaxStreamingBitrate optional.Int64
    StartTimeTicks optional.Int64
    AudioStreamIndex optional.Int32
    SubtitleStreamIndex optional.Int32
    MaxAudioChannels optional.Int32
    MediaSourceId optional.String
    LiveStreamId optional.String
    AutoOpenLiveStream optional.Bool
    EnableDirectPlay optional.Bool
    EnableDirectStream optional.Bool
    EnableTranscoding optional.Bool
    AllowVideoStreamCopy optional.Bool
    AllowAudioStreamCopy optional.Bool
    DeviceProfileDto optional.Interface
}

/*
GetPostedPlaybackInfo Gets live playback media info for an item.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param itemId The item id.
 * @param optional nil or *GetPostedPlaybackInfoOpts - Optional Parameters:
 * @param "UserId" (optional.Interface of string) -  The user id.
 * @param "MaxStreamingBitrate" (optional.Int64) -  The maximum streaming bitrate.
 * @param "StartTimeTicks" (optional.Int64) -  The start time in ticks.
 * @param "AudioStreamIndex" (optional.Int32) -  The audio stream index.
 * @param "SubtitleStreamIndex" (optional.Int32) -  The subtitle stream index.
 * @param "MaxAudioChannels" (optional.Int32) -  The maximum number of audio channels.
 * @param "MediaSourceId" (optional.String) -  The media source id.
 * @param "LiveStreamId" (optional.String) -  The livestream id.
 * @param "AutoOpenLiveStream" (optional.Bool) -  Whether to auto open the livestream.
 * @param "EnableDirectPlay" (optional.Bool) -  Whether to enable direct play. Default: true.
 * @param "EnableDirectStream" (optional.Bool) -  Whether to enable direct stream. Default: true.
 * @param "EnableTranscoding" (optional.Bool) -  Whether to enable transcoding. Default: true.
 * @param "AllowVideoStreamCopy" (optional.Bool) -  Whether to allow to copy the video stream. Default: true.
 * @param "AllowAudioStreamCopy" (optional.Bool) -  Whether to allow to copy the audio stream. Default: true.
 * @param "DeviceProfileDto" (optional.Interface of DeviceProfileDto) -  The device profile.
@return PlaybackInfoResponse
*/
func (a *MediaInfoApiService) GetPostedPlaybackInfo(ctx _context.Context, itemId string, localVarOptionals *GetPostedPlaybackInfoOpts) (PlaybackInfoResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PlaybackInfoResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/Items/{itemId}/PlaybackInfo"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", _neturl.QueryEscape(parameterToString(itemId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.UserId.IsSet() {
		localVarQueryParams.Add("userId", parameterToString(localVarOptionals.UserId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxStreamingBitrate.IsSet() {
		localVarQueryParams.Add("maxStreamingBitrate", parameterToString(localVarOptionals.MaxStreamingBitrate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartTimeTicks.IsSet() {
		localVarQueryParams.Add("startTimeTicks", parameterToString(localVarOptionals.StartTimeTicks.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AudioStreamIndex.IsSet() {
		localVarQueryParams.Add("audioStreamIndex", parameterToString(localVarOptionals.AudioStreamIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubtitleStreamIndex.IsSet() {
		localVarQueryParams.Add("subtitleStreamIndex", parameterToString(localVarOptionals.SubtitleStreamIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxAudioChannels.IsSet() {
		localVarQueryParams.Add("maxAudioChannels", parameterToString(localVarOptionals.MaxAudioChannels.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MediaSourceId.IsSet() {
		localVarQueryParams.Add("mediaSourceId", parameterToString(localVarOptionals.MediaSourceId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LiveStreamId.IsSet() {
		localVarQueryParams.Add("liveStreamId", parameterToString(localVarOptionals.LiveStreamId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AutoOpenLiveStream.IsSet() {
		localVarQueryParams.Add("autoOpenLiveStream", parameterToString(localVarOptionals.AutoOpenLiveStream.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EnableDirectPlay.IsSet() {
		localVarQueryParams.Add("enableDirectPlay", parameterToString(localVarOptionals.EnableDirectPlay.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EnableDirectStream.IsSet() {
		localVarQueryParams.Add("enableDirectStream", parameterToString(localVarOptionals.EnableDirectStream.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EnableTranscoding.IsSet() {
		localVarQueryParams.Add("enableTranscoding", parameterToString(localVarOptionals.EnableTranscoding.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AllowVideoStreamCopy.IsSet() {
		localVarQueryParams.Add("allowVideoStreamCopy", parameterToString(localVarOptionals.AllowVideoStreamCopy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AllowAudioStreamCopy.IsSet() {
		localVarQueryParams.Add("allowAudioStreamCopy", parameterToString(localVarOptionals.AllowAudioStreamCopy.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.DeviceProfileDto.IsSet() {
		localVarOptionalDeviceProfileDto, localVarOptionalDeviceProfileDtook := localVarOptionals.DeviceProfileDto.Value().(DeviceProfileDto)
		if !localVarOptionalDeviceProfileDtook {
			return localVarReturnValue, nil, reportError("deviceProfileDto should be DeviceProfileDto")
		}
		localVarPostBody = &localVarOptionalDeviceProfileDto
	}

	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-Emby-Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// OpenLiveStreamOpts Optional parameters for the method 'OpenLiveStream'
type OpenLiveStreamOpts struct {
    OpenToken optional.String
    UserId optional.Interface
    PlaySessionId optional.String
    MaxStreamingBitrate optional.Int64
    StartTimeTicks optional.Int64
    AudioStreamIndex optional.Int32
    SubtitleStreamIndex optional.Int32
    MaxAudioChannels optional.Int32
    ItemId optional.Interface
    EnableDirectPlay optional.Bool
    EnableDirectStream optional.Bool
    OpenLiveStreamDto optional.Interface
}

/*
OpenLiveStream Opens a media source.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *OpenLiveStreamOpts - Optional Parameters:
 * @param "OpenToken" (optional.String) -  The open token.
 * @param "UserId" (optional.Interface of string) -  The user id.
 * @param "PlaySessionId" (optional.String) -  The play session id.
 * @param "MaxStreamingBitrate" (optional.Int64) -  The maximum streaming bitrate.
 * @param "StartTimeTicks" (optional.Int64) -  The start time in ticks.
 * @param "AudioStreamIndex" (optional.Int32) -  The audio stream index.
 * @param "SubtitleStreamIndex" (optional.Int32) -  The subtitle stream index.
 * @param "MaxAudioChannels" (optional.Int32) -  The maximum number of audio channels.
 * @param "ItemId" (optional.Interface of string) -  The item id.
 * @param "EnableDirectPlay" (optional.Bool) -  Whether to enable direct play. Default: true.
 * @param "EnableDirectStream" (optional.Bool) -  Whether to enable direct stream. Default: true.
 * @param "OpenLiveStreamDto" (optional.Interface of OpenLiveStreamDto) -  The open live stream dto.
@return LiveStreamResponse
*/
func (a *MediaInfoApiService) OpenLiveStream(ctx _context.Context, localVarOptionals *OpenLiveStreamOpts) (LiveStreamResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  LiveStreamResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/LiveStreams/Open"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.OpenToken.IsSet() {
		localVarQueryParams.Add("openToken", parameterToString(localVarOptionals.OpenToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UserId.IsSet() {
		localVarQueryParams.Add("userId", parameterToString(localVarOptionals.UserId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PlaySessionId.IsSet() {
		localVarQueryParams.Add("playSessionId", parameterToString(localVarOptionals.PlaySessionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxStreamingBitrate.IsSet() {
		localVarQueryParams.Add("maxStreamingBitrate", parameterToString(localVarOptionals.MaxStreamingBitrate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartTimeTicks.IsSet() {
		localVarQueryParams.Add("startTimeTicks", parameterToString(localVarOptionals.StartTimeTicks.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AudioStreamIndex.IsSet() {
		localVarQueryParams.Add("audioStreamIndex", parameterToString(localVarOptionals.AudioStreamIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubtitleStreamIndex.IsSet() {
		localVarQueryParams.Add("subtitleStreamIndex", parameterToString(localVarOptionals.SubtitleStreamIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxAudioChannels.IsSet() {
		localVarQueryParams.Add("maxAudioChannels", parameterToString(localVarOptionals.MaxAudioChannels.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ItemId.IsSet() {
		localVarQueryParams.Add("itemId", parameterToString(localVarOptionals.ItemId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EnableDirectPlay.IsSet() {
		localVarQueryParams.Add("enableDirectPlay", parameterToString(localVarOptionals.EnableDirectPlay.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EnableDirectStream.IsSet() {
		localVarQueryParams.Add("enableDirectStream", parameterToString(localVarOptionals.EnableDirectStream.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.OpenLiveStreamDto.IsSet() {
		localVarOptionalOpenLiveStreamDto, localVarOptionalOpenLiveStreamDtook := localVarOptionals.OpenLiveStreamDto.Value().(OpenLiveStreamDto)
		if !localVarOptionalOpenLiveStreamDtook {
			return localVarReturnValue, nil, reportError("openLiveStreamDto should be OpenLiveStreamDto")
		}
		localVarPostBody = &localVarOptionalOpenLiveStreamDto
	}

	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-Emby-Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
