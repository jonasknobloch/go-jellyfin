/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package client

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// FilterApiService FilterApi service
type FilterApiService service

// GetQueryFiltersOpts Optional parameters for the method 'GetQueryFilters'
type GetQueryFiltersOpts struct {
    UserId optional.Interface
    ParentId optional.String
    IncludeItemTypes optional.String
    IsAiring optional.Bool
    IsMovie optional.Bool
    IsSports optional.Bool
    IsKids optional.Bool
    IsNews optional.Bool
    IsSeries optional.Bool
    Recursive optional.Bool
}

/*
GetQueryFilters Gets query filters.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *GetQueryFiltersOpts - Optional Parameters:
 * @param "UserId" (optional.Interface of string) -  Optional. User id.
 * @param "ParentId" (optional.String) -  Optional. Specify this to localize the search to a specific item or folder. Omit to use the root.
 * @param "IncludeItemTypes" (optional.String) -  Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
 * @param "IsAiring" (optional.Bool) -  Optional. Is item airing.
 * @param "IsMovie" (optional.Bool) -  Optional. Is item movie.
 * @param "IsSports" (optional.Bool) -  Optional. Is item sports.
 * @param "IsKids" (optional.Bool) -  Optional. Is item kids.
 * @param "IsNews" (optional.Bool) -  Optional. Is item news.
 * @param "IsSeries" (optional.Bool) -  Optional. Is item series.
 * @param "Recursive" (optional.Bool) -  Optional. Search recursive.
@return QueryFilters
*/
func (a *FilterApiService) GetQueryFilters(ctx _context.Context, localVarOptionals *GetQueryFiltersOpts) (QueryFilters, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  QueryFilters
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/Items/Filters2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.UserId.IsSet() {
		localVarQueryParams.Add("userId", parameterToString(localVarOptionals.UserId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParentId.IsSet() {
		localVarQueryParams.Add("parentId", parameterToString(localVarOptionals.ParentId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeItemTypes.IsSet() {
		localVarQueryParams.Add("includeItemTypes", parameterToString(localVarOptionals.IncludeItemTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsAiring.IsSet() {
		localVarQueryParams.Add("isAiring", parameterToString(localVarOptionals.IsAiring.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsMovie.IsSet() {
		localVarQueryParams.Add("isMovie", parameterToString(localVarOptionals.IsMovie.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsSports.IsSet() {
		localVarQueryParams.Add("isSports", parameterToString(localVarOptionals.IsSports.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsKids.IsSet() {
		localVarQueryParams.Add("isKids", parameterToString(localVarOptionals.IsKids.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsNews.IsSet() {
		localVarQueryParams.Add("isNews", parameterToString(localVarOptionals.IsNews.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsSeries.IsSet() {
		localVarQueryParams.Add("isSeries", parameterToString(localVarOptionals.IsSeries.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Recursive.IsSet() {
		localVarQueryParams.Add("recursive", parameterToString(localVarOptionals.Recursive.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-Emby-Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GetQueryFiltersLegacyOpts Optional parameters for the method 'GetQueryFiltersLegacy'
type GetQueryFiltersLegacyOpts struct {
    UserId optional.Interface
    ParentId optional.String
    IncludeItemTypes optional.String
    MediaTypes optional.String
}

/*
GetQueryFiltersLegacy Gets legacy query filters.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *GetQueryFiltersLegacyOpts - Optional Parameters:
 * @param "UserId" (optional.Interface of string) -  Optional. User id.
 * @param "ParentId" (optional.String) -  Optional. Parent id.
 * @param "IncludeItemTypes" (optional.String) -  Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
 * @param "MediaTypes" (optional.String) -  Optional. Filter by MediaType. Allows multiple, comma delimited.
@return QueryFiltersLegacy
*/
func (a *FilterApiService) GetQueryFiltersLegacy(ctx _context.Context, localVarOptionals *GetQueryFiltersLegacyOpts) (QueryFiltersLegacy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  QueryFiltersLegacy
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/Items/Filters"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.UserId.IsSet() {
		localVarQueryParams.Add("userId", parameterToString(localVarOptionals.UserId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParentId.IsSet() {
		localVarQueryParams.Add("parentId", parameterToString(localVarOptionals.ParentId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeItemTypes.IsSet() {
		localVarQueryParams.Add("includeItemTypes", parameterToString(localVarOptionals.IncludeItemTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MediaTypes.IsSet() {
		localVarQueryParams.Add("mediaTypes", parameterToString(localVarOptionals.MediaTypes.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-Emby-Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
