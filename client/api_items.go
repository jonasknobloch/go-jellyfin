/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package client

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"github.com/antihax/optional"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// ItemsApiService ItemsApi service
type ItemsApiService service

// GetItemsOpts Optional parameters for the method 'GetItems'
type GetItemsOpts struct {
    UserId optional.Interface
    MaxOfficialRating optional.String
    HasThemeSong optional.Bool
    HasThemeVideo optional.Bool
    HasSubtitles optional.Bool
    HasSpecialFeature optional.Bool
    HasTrailer optional.Bool
    AdjacentTo optional.String
    ParentIndexNumber optional.Int32
    HasParentalRating optional.Bool
    IsHd optional.Bool
    Is4K optional.Bool
    LocationTypes optional.String
    ExcludeLocationTypes optional.Interface
    IsMissing optional.Bool
    IsUnaired optional.Bool
    MinCommunityRating optional.Float64
    MinCriticRating optional.Float64
    MinPremiereDate optional.Time
    MinDateLastSaved optional.Time
    MinDateLastSavedForUser optional.Time
    MaxPremiereDate optional.Time
    HasOverview optional.Bool
    HasImdbId optional.Bool
    HasTmdbId optional.Bool
    HasTvdbId optional.Bool
    ExcludeItemIds optional.String
    StartIndex optional.Int32
    Limit optional.Int32
    Recursive optional.Bool
    SearchTerm optional.String
    SortOrder optional.String
    ParentId optional.String
    Fields optional.String
    ExcludeItemTypes optional.String
    IncludeItemTypes optional.String
    Filters optional.Interface
    IsFavorite optional.Bool
    MediaTypes optional.String
    ImageTypes optional.String
    SortBy optional.String
    IsPlayed optional.Bool
    Genres optional.String
    OfficialRatings optional.String
    Tags optional.String
    Years optional.String
    EnableUserData optional.Bool
    ImageTypeLimit optional.Int32
    EnableImageTypes optional.String
    Person optional.String
    PersonIds optional.String
    PersonTypes optional.String
    Studios optional.String
    Artists optional.String
    ExcludeArtistIds optional.String
    ArtistIds optional.String
    AlbumArtistIds optional.String
    ContributingArtistIds optional.String
    Albums optional.String
    AlbumIds optional.String
    Ids optional.String
    VideoTypes optional.String
    MinOfficialRating optional.String
    IsLocked optional.Bool
    IsPlaceHolder optional.Bool
    HasOfficialRating optional.Bool
    CollapseBoxSetItems optional.Bool
    MinWidth optional.Int32
    MinHeight optional.Int32
    MaxWidth optional.Int32
    MaxHeight optional.Int32
    Is3D optional.Bool
    SeriesStatus optional.String
    NameStartsWithOrGreater optional.String
    NameStartsWith optional.String
    NameLessThan optional.String
    StudioIds optional.String
    GenreIds optional.String
    EnableTotalRecordCount optional.Bool
    EnableImages optional.Bool
}

/*
GetItems Gets items based on a query.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param uId The user id supplied in the /Users/{uid}/Items.
 * @param optional nil or *GetItemsOpts - Optional Parameters:
 * @param "UserId" (optional.Interface of string) -  The user id supplied as query parameter.
 * @param "MaxOfficialRating" (optional.String) -  Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
 * @param "HasThemeSong" (optional.Bool) -  Optional filter by items with theme songs.
 * @param "HasThemeVideo" (optional.Bool) -  Optional filter by items with theme videos.
 * @param "HasSubtitles" (optional.Bool) -  Optional filter by items with subtitles.
 * @param "HasSpecialFeature" (optional.Bool) -  Optional filter by items with special features.
 * @param "HasTrailer" (optional.Bool) -  Optional filter by items with trailers.
 * @param "AdjacentTo" (optional.String) -  Optional. Return items that are siblings of a supplied item.
 * @param "ParentIndexNumber" (optional.Int32) -  Optional filter by parent index number.
 * @param "HasParentalRating" (optional.Bool) -  Optional filter by items that have or do not have a parental rating.
 * @param "IsHd" (optional.Bool) -  Optional filter by items that are HD or not.
 * @param "Is4K" (optional.Bool) -  Optional filter by items that are 4K or not.
 * @param "LocationTypes" (optional.String) -  Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
 * @param "ExcludeLocationTypes" (optional.Interface of []LocationType) -  Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimeted.
 * @param "IsMissing" (optional.Bool) -  Optional filter by items that are missing episodes or not.
 * @param "IsUnaired" (optional.Bool) -  Optional filter by items that are unaired episodes or not.
 * @param "MinCommunityRating" (optional.Float64) -  Optional filter by minimum community rating.
 * @param "MinCriticRating" (optional.Float64) -  Optional filter by minimum critic rating.
 * @param "MinPremiereDate" (optional.Time) -  Optional. The minimum premiere date. Format = ISO.
 * @param "MinDateLastSaved" (optional.Time) -  Optional. The minimum last saved date. Format = ISO.
 * @param "MinDateLastSavedForUser" (optional.Time) -  Optional. The minimum last saved date for the current user. Format = ISO.
 * @param "MaxPremiereDate" (optional.Time) -  Optional. The maximum premiere date. Format = ISO.
 * @param "HasOverview" (optional.Bool) -  Optional filter by items that have an overview or not.
 * @param "HasImdbId" (optional.Bool) -  Optional filter by items that have an imdb id or not.
 * @param "HasTmdbId" (optional.Bool) -  Optional filter by items that have a tmdb id or not.
 * @param "HasTvdbId" (optional.Bool) -  Optional filter by items that have a tvdb id or not.
 * @param "ExcludeItemIds" (optional.String) -  Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
 * @param "StartIndex" (optional.Int32) -  Optional. The record index to start at. All items with a lower index will be dropped from the results.
 * @param "Limit" (optional.Int32) -  Optional. The maximum number of records to return.
 * @param "Recursive" (optional.Bool) -  When searching within folders, this determines whether or not the search will be recursive. true/false.
 * @param "SearchTerm" (optional.String) -  Optional. Filter based on a search term.
 * @param "SortOrder" (optional.String) -  Sort Order - Ascending,Descending.
 * @param "ParentId" (optional.String) -  Specify this to localize the search to a specific item or folder. Omit to use the root.
 * @param "Fields" (optional.String) -  Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.
 * @param "ExcludeItemTypes" (optional.String) -  Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
 * @param "IncludeItemTypes" (optional.String) -  Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimeted.
 * @param "Filters" (optional.Interface of []ItemFilter) -  Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes.
 * @param "IsFavorite" (optional.Bool) -  Optional filter by items that are marked as favorite, or not.
 * @param "MediaTypes" (optional.String) -  Optional filter by MediaType. Allows multiple, comma delimited.
 * @param "ImageTypes" (optional.String) -  Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
 * @param "SortBy" (optional.String) -  Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
 * @param "IsPlayed" (optional.Bool) -  Optional filter by items that are played, or not.
 * @param "Genres" (optional.String) -  Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
 * @param "OfficialRatings" (optional.String) -  Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
 * @param "Tags" (optional.String) -  Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
 * @param "Years" (optional.String) -  Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
 * @param "EnableUserData" (optional.Bool) -  Optional, include user data.
 * @param "ImageTypeLimit" (optional.Int32) -  Optional, the max number of images to return, per image type.
 * @param "EnableImageTypes" (optional.String) -  Optional. The image types to include in the output.
 * @param "Person" (optional.String) -  Optional. If specified, results will be filtered to include only those containing the specified person.
 * @param "PersonIds" (optional.String) -  Optional. If specified, results will be filtered to include only those containing the specified person id.
 * @param "PersonTypes" (optional.String) -  Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
 * @param "Studios" (optional.String) -  Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
 * @param "Artists" (optional.String) -  Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimeted.
 * @param "ExcludeArtistIds" (optional.String) -  Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimeted.
 * @param "ArtistIds" (optional.String) -  Optional. If specified, results will be filtered to include only those containing the specified artist id.
 * @param "AlbumArtistIds" (optional.String) -  Optional. If specified, results will be filtered to include only those containing the specified album artist id.
 * @param "ContributingArtistIds" (optional.String) -  Optional. If specified, results will be filtered to include only those containing the specified contributing artist id.
 * @param "Albums" (optional.String) -  Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
 * @param "AlbumIds" (optional.String) -  Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimeted.
 * @param "Ids" (optional.String) -  Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
 * @param "VideoTypes" (optional.String) -  Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
 * @param "MinOfficialRating" (optional.String) -  Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
 * @param "IsLocked" (optional.Bool) -  Optional filter by items that are locked.
 * @param "IsPlaceHolder" (optional.Bool) -  Optional filter by items that are placeholders.
 * @param "HasOfficialRating" (optional.Bool) -  Optional filter by items that have official ratings.
 * @param "CollapseBoxSetItems" (optional.Bool) -  Whether or not to hide items behind their boxsets.
 * @param "MinWidth" (optional.Int32) -  Optional. Filter by the minimum width of the item.
 * @param "MinHeight" (optional.Int32) -  Optional. Filter by the minimum height of the item.
 * @param "MaxWidth" (optional.Int32) -  Optional. Filter by the maximum width of the item.
 * @param "MaxHeight" (optional.Int32) -  Optional. Filter by the maximum height of the item.
 * @param "Is3D" (optional.Bool) -  Optional filter by items that are 3D, or not.
 * @param "SeriesStatus" (optional.String) -  Optional filter by Series Status. Allows multiple, comma delimeted.
 * @param "NameStartsWithOrGreater" (optional.String) -  Optional filter by items whose name is sorted equally or greater than a given input string.
 * @param "NameStartsWith" (optional.String) -  Optional filter by items whose name is sorted equally than a given input string.
 * @param "NameLessThan" (optional.String) -  Optional filter by items whose name is equally or lesser than a given input string.
 * @param "StudioIds" (optional.String) -  Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimeted.
 * @param "GenreIds" (optional.String) -  Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimeted.
 * @param "EnableTotalRecordCount" (optional.Bool) -  Optional. Enable the total record count.
 * @param "EnableImages" (optional.Bool) -  Optional, include image information in output.
@return BaseItemDtoQueryResult
*/
func (a *ItemsApiService) GetItems(ctx _context.Context, uId string, localVarOptionals *GetItemsOpts) (BaseItemDtoQueryResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BaseItemDtoQueryResult
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/Items"
	localVarPath = strings.Replace(localVarPath, "{"+"uId"+"}", _neturl.QueryEscape(parameterToString(uId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.UserId.IsSet() {
		localVarQueryParams.Add("userId", parameterToString(localVarOptionals.UserId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxOfficialRating.IsSet() {
		localVarQueryParams.Add("maxOfficialRating", parameterToString(localVarOptionals.MaxOfficialRating.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HasThemeSong.IsSet() {
		localVarQueryParams.Add("hasThemeSong", parameterToString(localVarOptionals.HasThemeSong.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HasThemeVideo.IsSet() {
		localVarQueryParams.Add("hasThemeVideo", parameterToString(localVarOptionals.HasThemeVideo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HasSubtitles.IsSet() {
		localVarQueryParams.Add("hasSubtitles", parameterToString(localVarOptionals.HasSubtitles.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HasSpecialFeature.IsSet() {
		localVarQueryParams.Add("hasSpecialFeature", parameterToString(localVarOptionals.HasSpecialFeature.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HasTrailer.IsSet() {
		localVarQueryParams.Add("hasTrailer", parameterToString(localVarOptionals.HasTrailer.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AdjacentTo.IsSet() {
		localVarQueryParams.Add("adjacentTo", parameterToString(localVarOptionals.AdjacentTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParentIndexNumber.IsSet() {
		localVarQueryParams.Add("parentIndexNumber", parameterToString(localVarOptionals.ParentIndexNumber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HasParentalRating.IsSet() {
		localVarQueryParams.Add("hasParentalRating", parameterToString(localVarOptionals.HasParentalRating.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsHd.IsSet() {
		localVarQueryParams.Add("isHd", parameterToString(localVarOptionals.IsHd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Is4K.IsSet() {
		localVarQueryParams.Add("is4K", parameterToString(localVarOptionals.Is4K.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LocationTypes.IsSet() {
		localVarQueryParams.Add("locationTypes", parameterToString(localVarOptionals.LocationTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeLocationTypes.IsSet() {
		t:=localVarOptionals.ExcludeLocationTypes.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("excludeLocationTypes", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("excludeLocationTypes", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.IsMissing.IsSet() {
		localVarQueryParams.Add("isMissing", parameterToString(localVarOptionals.IsMissing.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsUnaired.IsSet() {
		localVarQueryParams.Add("isUnaired", parameterToString(localVarOptionals.IsUnaired.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCommunityRating.IsSet() {
		localVarQueryParams.Add("minCommunityRating", parameterToString(localVarOptionals.MinCommunityRating.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCriticRating.IsSet() {
		localVarQueryParams.Add("minCriticRating", parameterToString(localVarOptionals.MinCriticRating.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinPremiereDate.IsSet() {
		localVarQueryParams.Add("minPremiereDate", parameterToString(localVarOptionals.MinPremiereDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinDateLastSaved.IsSet() {
		localVarQueryParams.Add("minDateLastSaved", parameterToString(localVarOptionals.MinDateLastSaved.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinDateLastSavedForUser.IsSet() {
		localVarQueryParams.Add("minDateLastSavedForUser", parameterToString(localVarOptionals.MinDateLastSavedForUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxPremiereDate.IsSet() {
		localVarQueryParams.Add("maxPremiereDate", parameterToString(localVarOptionals.MaxPremiereDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HasOverview.IsSet() {
		localVarQueryParams.Add("hasOverview", parameterToString(localVarOptionals.HasOverview.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HasImdbId.IsSet() {
		localVarQueryParams.Add("hasImdbId", parameterToString(localVarOptionals.HasImdbId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HasTmdbId.IsSet() {
		localVarQueryParams.Add("hasTmdbId", parameterToString(localVarOptionals.HasTmdbId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HasTvdbId.IsSet() {
		localVarQueryParams.Add("hasTvdbId", parameterToString(localVarOptionals.HasTvdbId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeItemIds.IsSet() {
		localVarQueryParams.Add("excludeItemIds", parameterToString(localVarOptionals.ExcludeItemIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartIndex.IsSet() {
		localVarQueryParams.Add("startIndex", parameterToString(localVarOptionals.StartIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Recursive.IsSet() {
		localVarQueryParams.Add("recursive", parameterToString(localVarOptionals.Recursive.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SearchTerm.IsSet() {
		localVarQueryParams.Add("searchTerm", parameterToString(localVarOptionals.SearchTerm.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortOrder.IsSet() {
		localVarQueryParams.Add("sortOrder", parameterToString(localVarOptionals.SortOrder.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParentId.IsSet() {
		localVarQueryParams.Add("parentId", parameterToString(localVarOptionals.ParentId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Fields.IsSet() {
		localVarQueryParams.Add("fields", parameterToString(localVarOptionals.Fields.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeItemTypes.IsSet() {
		localVarQueryParams.Add("excludeItemTypes", parameterToString(localVarOptionals.ExcludeItemTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeItemTypes.IsSet() {
		localVarQueryParams.Add("includeItemTypes", parameterToString(localVarOptionals.IncludeItemTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Filters.IsSet() {
		t:=localVarOptionals.Filters.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("filters", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("filters", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.IsFavorite.IsSet() {
		localVarQueryParams.Add("isFavorite", parameterToString(localVarOptionals.IsFavorite.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MediaTypes.IsSet() {
		localVarQueryParams.Add("mediaTypes", parameterToString(localVarOptionals.MediaTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ImageTypes.IsSet() {
		localVarQueryParams.Add("imageTypes", parameterToString(localVarOptionals.ImageTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortBy.IsSet() {
		localVarQueryParams.Add("sortBy", parameterToString(localVarOptionals.SortBy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsPlayed.IsSet() {
		localVarQueryParams.Add("isPlayed", parameterToString(localVarOptionals.IsPlayed.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Genres.IsSet() {
		localVarQueryParams.Add("genres", parameterToString(localVarOptionals.Genres.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OfficialRatings.IsSet() {
		localVarQueryParams.Add("officialRatings", parameterToString(localVarOptionals.OfficialRatings.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Tags.IsSet() {
		localVarQueryParams.Add("tags", parameterToString(localVarOptionals.Tags.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Years.IsSet() {
		localVarQueryParams.Add("years", parameterToString(localVarOptionals.Years.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EnableUserData.IsSet() {
		localVarQueryParams.Add("enableUserData", parameterToString(localVarOptionals.EnableUserData.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ImageTypeLimit.IsSet() {
		localVarQueryParams.Add("imageTypeLimit", parameterToString(localVarOptionals.ImageTypeLimit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EnableImageTypes.IsSet() {
		localVarQueryParams.Add("enableImageTypes", parameterToString(localVarOptionals.EnableImageTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Person.IsSet() {
		localVarQueryParams.Add("person", parameterToString(localVarOptionals.Person.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PersonIds.IsSet() {
		localVarQueryParams.Add("personIds", parameterToString(localVarOptionals.PersonIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PersonTypes.IsSet() {
		localVarQueryParams.Add("personTypes", parameterToString(localVarOptionals.PersonTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Studios.IsSet() {
		localVarQueryParams.Add("studios", parameterToString(localVarOptionals.Studios.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Artists.IsSet() {
		localVarQueryParams.Add("artists", parameterToString(localVarOptionals.Artists.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeArtistIds.IsSet() {
		localVarQueryParams.Add("excludeArtistIds", parameterToString(localVarOptionals.ExcludeArtistIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ArtistIds.IsSet() {
		localVarQueryParams.Add("artistIds", parameterToString(localVarOptionals.ArtistIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AlbumArtistIds.IsSet() {
		localVarQueryParams.Add("albumArtistIds", parameterToString(localVarOptionals.AlbumArtistIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ContributingArtistIds.IsSet() {
		localVarQueryParams.Add("contributingArtistIds", parameterToString(localVarOptionals.ContributingArtistIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Albums.IsSet() {
		localVarQueryParams.Add("albums", parameterToString(localVarOptionals.Albums.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AlbumIds.IsSet() {
		localVarQueryParams.Add("albumIds", parameterToString(localVarOptionals.AlbumIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Ids.IsSet() {
		localVarQueryParams.Add("ids", parameterToString(localVarOptionals.Ids.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VideoTypes.IsSet() {
		localVarQueryParams.Add("videoTypes", parameterToString(localVarOptionals.VideoTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinOfficialRating.IsSet() {
		localVarQueryParams.Add("minOfficialRating", parameterToString(localVarOptionals.MinOfficialRating.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsLocked.IsSet() {
		localVarQueryParams.Add("isLocked", parameterToString(localVarOptionals.IsLocked.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsPlaceHolder.IsSet() {
		localVarQueryParams.Add("isPlaceHolder", parameterToString(localVarOptionals.IsPlaceHolder.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HasOfficialRating.IsSet() {
		localVarQueryParams.Add("hasOfficialRating", parameterToString(localVarOptionals.HasOfficialRating.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CollapseBoxSetItems.IsSet() {
		localVarQueryParams.Add("collapseBoxSetItems", parameterToString(localVarOptionals.CollapseBoxSetItems.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinWidth.IsSet() {
		localVarQueryParams.Add("minWidth", parameterToString(localVarOptionals.MinWidth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinHeight.IsSet() {
		localVarQueryParams.Add("minHeight", parameterToString(localVarOptionals.MinHeight.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxWidth.IsSet() {
		localVarQueryParams.Add("maxWidth", parameterToString(localVarOptionals.MaxWidth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxHeight.IsSet() {
		localVarQueryParams.Add("maxHeight", parameterToString(localVarOptionals.MaxHeight.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Is3D.IsSet() {
		localVarQueryParams.Add("is3D", parameterToString(localVarOptionals.Is3D.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SeriesStatus.IsSet() {
		localVarQueryParams.Add("seriesStatus", parameterToString(localVarOptionals.SeriesStatus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NameStartsWithOrGreater.IsSet() {
		localVarQueryParams.Add("nameStartsWithOrGreater", parameterToString(localVarOptionals.NameStartsWithOrGreater.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NameStartsWith.IsSet() {
		localVarQueryParams.Add("nameStartsWith", parameterToString(localVarOptionals.NameStartsWith.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NameLessThan.IsSet() {
		localVarQueryParams.Add("nameLessThan", parameterToString(localVarOptionals.NameLessThan.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StudioIds.IsSet() {
		localVarQueryParams.Add("studioIds", parameterToString(localVarOptionals.StudioIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GenreIds.IsSet() {
		localVarQueryParams.Add("genreIds", parameterToString(localVarOptionals.GenreIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EnableTotalRecordCount.IsSet() {
		localVarQueryParams.Add("enableTotalRecordCount", parameterToString(localVarOptionals.EnableTotalRecordCount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EnableImages.IsSet() {
		localVarQueryParams.Add("enableImages", parameterToString(localVarOptionals.EnableImages.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-Emby-Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GetItems2Opts Optional parameters for the method 'GetItems2'
type GetItems2Opts struct {
    UserId optional.Interface
    MaxOfficialRating optional.String
    HasThemeSong optional.Bool
    HasThemeVideo optional.Bool
    HasSubtitles optional.Bool
    HasSpecialFeature optional.Bool
    HasTrailer optional.Bool
    AdjacentTo optional.String
    ParentIndexNumber optional.Int32
    HasParentalRating optional.Bool
    IsHd optional.Bool
    Is4K optional.Bool
    LocationTypes optional.String
    ExcludeLocationTypes optional.Interface
    IsMissing optional.Bool
    IsUnaired optional.Bool
    MinCommunityRating optional.Float64
    MinCriticRating optional.Float64
    MinPremiereDate optional.Time
    MinDateLastSaved optional.Time
    MinDateLastSavedForUser optional.Time
    MaxPremiereDate optional.Time
    HasOverview optional.Bool
    HasImdbId optional.Bool
    HasTmdbId optional.Bool
    HasTvdbId optional.Bool
    ExcludeItemIds optional.String
    StartIndex optional.Int32
    Limit optional.Int32
    Recursive optional.Bool
    SearchTerm optional.String
    SortOrder optional.String
    ParentId optional.String
    Fields optional.String
    ExcludeItemTypes optional.String
    IncludeItemTypes optional.String
    Filters optional.Interface
    IsFavorite optional.Bool
    MediaTypes optional.String
    ImageTypes optional.String
    SortBy optional.String
    IsPlayed optional.Bool
    Genres optional.String
    OfficialRatings optional.String
    Tags optional.String
    Years optional.String
    EnableUserData optional.Bool
    ImageTypeLimit optional.Int32
    EnableImageTypes optional.String
    Person optional.String
    PersonIds optional.String
    PersonTypes optional.String
    Studios optional.String
    Artists optional.String
    ExcludeArtistIds optional.String
    ArtistIds optional.String
    AlbumArtistIds optional.String
    ContributingArtistIds optional.String
    Albums optional.String
    AlbumIds optional.String
    Ids optional.String
    VideoTypes optional.String
    MinOfficialRating optional.String
    IsLocked optional.Bool
    IsPlaceHolder optional.Bool
    HasOfficialRating optional.Bool
    CollapseBoxSetItems optional.Bool
    MinWidth optional.Int32
    MinHeight optional.Int32
    MaxWidth optional.Int32
    MaxHeight optional.Int32
    Is3D optional.Bool
    SeriesStatus optional.String
    NameStartsWithOrGreater optional.String
    NameStartsWith optional.String
    NameLessThan optional.String
    StudioIds optional.String
    GenreIds optional.String
    EnableTotalRecordCount optional.Bool
    EnableImages optional.Bool
}

/*
GetItems2 Gets items based on a query.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param uId The user id supplied in the /Users/{uid}/Items.
 * @param optional nil or *GetItems2Opts - Optional Parameters:
 * @param "UserId" (optional.Interface of string) -  The user id supplied as query parameter.
 * @param "MaxOfficialRating" (optional.String) -  Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
 * @param "HasThemeSong" (optional.Bool) -  Optional filter by items with theme songs.
 * @param "HasThemeVideo" (optional.Bool) -  Optional filter by items with theme videos.
 * @param "HasSubtitles" (optional.Bool) -  Optional filter by items with subtitles.
 * @param "HasSpecialFeature" (optional.Bool) -  Optional filter by items with special features.
 * @param "HasTrailer" (optional.Bool) -  Optional filter by items with trailers.
 * @param "AdjacentTo" (optional.String) -  Optional. Return items that are siblings of a supplied item.
 * @param "ParentIndexNumber" (optional.Int32) -  Optional filter by parent index number.
 * @param "HasParentalRating" (optional.Bool) -  Optional filter by items that have or do not have a parental rating.
 * @param "IsHd" (optional.Bool) -  Optional filter by items that are HD or not.
 * @param "Is4K" (optional.Bool) -  Optional filter by items that are 4K or not.
 * @param "LocationTypes" (optional.String) -  Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
 * @param "ExcludeLocationTypes" (optional.Interface of []LocationType) -  Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimeted.
 * @param "IsMissing" (optional.Bool) -  Optional filter by items that are missing episodes or not.
 * @param "IsUnaired" (optional.Bool) -  Optional filter by items that are unaired episodes or not.
 * @param "MinCommunityRating" (optional.Float64) -  Optional filter by minimum community rating.
 * @param "MinCriticRating" (optional.Float64) -  Optional filter by minimum critic rating.
 * @param "MinPremiereDate" (optional.Time) -  Optional. The minimum premiere date. Format = ISO.
 * @param "MinDateLastSaved" (optional.Time) -  Optional. The minimum last saved date. Format = ISO.
 * @param "MinDateLastSavedForUser" (optional.Time) -  Optional. The minimum last saved date for the current user. Format = ISO.
 * @param "MaxPremiereDate" (optional.Time) -  Optional. The maximum premiere date. Format = ISO.
 * @param "HasOverview" (optional.Bool) -  Optional filter by items that have an overview or not.
 * @param "HasImdbId" (optional.Bool) -  Optional filter by items that have an imdb id or not.
 * @param "HasTmdbId" (optional.Bool) -  Optional filter by items that have a tmdb id or not.
 * @param "HasTvdbId" (optional.Bool) -  Optional filter by items that have a tvdb id or not.
 * @param "ExcludeItemIds" (optional.String) -  Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
 * @param "StartIndex" (optional.Int32) -  Optional. The record index to start at. All items with a lower index will be dropped from the results.
 * @param "Limit" (optional.Int32) -  Optional. The maximum number of records to return.
 * @param "Recursive" (optional.Bool) -  When searching within folders, this determines whether or not the search will be recursive. true/false.
 * @param "SearchTerm" (optional.String) -  Optional. Filter based on a search term.
 * @param "SortOrder" (optional.String) -  Sort Order - Ascending,Descending.
 * @param "ParentId" (optional.String) -  Specify this to localize the search to a specific item or folder. Omit to use the root.
 * @param "Fields" (optional.String) -  Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.
 * @param "ExcludeItemTypes" (optional.String) -  Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
 * @param "IncludeItemTypes" (optional.String) -  Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimeted.
 * @param "Filters" (optional.Interface of []ItemFilter) -  Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes.
 * @param "IsFavorite" (optional.Bool) -  Optional filter by items that are marked as favorite, or not.
 * @param "MediaTypes" (optional.String) -  Optional filter by MediaType. Allows multiple, comma delimited.
 * @param "ImageTypes" (optional.String) -  Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
 * @param "SortBy" (optional.String) -  Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
 * @param "IsPlayed" (optional.Bool) -  Optional filter by items that are played, or not.
 * @param "Genres" (optional.String) -  Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
 * @param "OfficialRatings" (optional.String) -  Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
 * @param "Tags" (optional.String) -  Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
 * @param "Years" (optional.String) -  Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
 * @param "EnableUserData" (optional.Bool) -  Optional, include user data.
 * @param "ImageTypeLimit" (optional.Int32) -  Optional, the max number of images to return, per image type.
 * @param "EnableImageTypes" (optional.String) -  Optional. The image types to include in the output.
 * @param "Person" (optional.String) -  Optional. If specified, results will be filtered to include only those containing the specified person.
 * @param "PersonIds" (optional.String) -  Optional. If specified, results will be filtered to include only those containing the specified person id.
 * @param "PersonTypes" (optional.String) -  Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
 * @param "Studios" (optional.String) -  Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
 * @param "Artists" (optional.String) -  Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimeted.
 * @param "ExcludeArtistIds" (optional.String) -  Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimeted.
 * @param "ArtistIds" (optional.String) -  Optional. If specified, results will be filtered to include only those containing the specified artist id.
 * @param "AlbumArtistIds" (optional.String) -  Optional. If specified, results will be filtered to include only those containing the specified album artist id.
 * @param "ContributingArtistIds" (optional.String) -  Optional. If specified, results will be filtered to include only those containing the specified contributing artist id.
 * @param "Albums" (optional.String) -  Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
 * @param "AlbumIds" (optional.String) -  Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimeted.
 * @param "Ids" (optional.String) -  Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
 * @param "VideoTypes" (optional.String) -  Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
 * @param "MinOfficialRating" (optional.String) -  Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
 * @param "IsLocked" (optional.Bool) -  Optional filter by items that are locked.
 * @param "IsPlaceHolder" (optional.Bool) -  Optional filter by items that are placeholders.
 * @param "HasOfficialRating" (optional.Bool) -  Optional filter by items that have official ratings.
 * @param "CollapseBoxSetItems" (optional.Bool) -  Whether or not to hide items behind their boxsets.
 * @param "MinWidth" (optional.Int32) -  Optional. Filter by the minimum width of the item.
 * @param "MinHeight" (optional.Int32) -  Optional. Filter by the minimum height of the item.
 * @param "MaxWidth" (optional.Int32) -  Optional. Filter by the maximum width of the item.
 * @param "MaxHeight" (optional.Int32) -  Optional. Filter by the maximum height of the item.
 * @param "Is3D" (optional.Bool) -  Optional filter by items that are 3D, or not.
 * @param "SeriesStatus" (optional.String) -  Optional filter by Series Status. Allows multiple, comma delimeted.
 * @param "NameStartsWithOrGreater" (optional.String) -  Optional filter by items whose name is sorted equally or greater than a given input string.
 * @param "NameStartsWith" (optional.String) -  Optional filter by items whose name is sorted equally than a given input string.
 * @param "NameLessThan" (optional.String) -  Optional filter by items whose name is equally or lesser than a given input string.
 * @param "StudioIds" (optional.String) -  Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimeted.
 * @param "GenreIds" (optional.String) -  Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimeted.
 * @param "EnableTotalRecordCount" (optional.Bool) -  Optional. Enable the total record count.
 * @param "EnableImages" (optional.Bool) -  Optional, include image information in output.
@return BaseItemDtoQueryResult
*/
func (a *ItemsApiService) GetItems2(ctx _context.Context, uId string, localVarOptionals *GetItems2Opts) (BaseItemDtoQueryResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BaseItemDtoQueryResult
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/Users/{uId}/Items"
	localVarPath = strings.Replace(localVarPath, "{"+"uId"+"}", _neturl.QueryEscape(parameterToString(uId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.UserId.IsSet() {
		localVarQueryParams.Add("userId", parameterToString(localVarOptionals.UserId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxOfficialRating.IsSet() {
		localVarQueryParams.Add("maxOfficialRating", parameterToString(localVarOptionals.MaxOfficialRating.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HasThemeSong.IsSet() {
		localVarQueryParams.Add("hasThemeSong", parameterToString(localVarOptionals.HasThemeSong.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HasThemeVideo.IsSet() {
		localVarQueryParams.Add("hasThemeVideo", parameterToString(localVarOptionals.HasThemeVideo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HasSubtitles.IsSet() {
		localVarQueryParams.Add("hasSubtitles", parameterToString(localVarOptionals.HasSubtitles.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HasSpecialFeature.IsSet() {
		localVarQueryParams.Add("hasSpecialFeature", parameterToString(localVarOptionals.HasSpecialFeature.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HasTrailer.IsSet() {
		localVarQueryParams.Add("hasTrailer", parameterToString(localVarOptionals.HasTrailer.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AdjacentTo.IsSet() {
		localVarQueryParams.Add("adjacentTo", parameterToString(localVarOptionals.AdjacentTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParentIndexNumber.IsSet() {
		localVarQueryParams.Add("parentIndexNumber", parameterToString(localVarOptionals.ParentIndexNumber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HasParentalRating.IsSet() {
		localVarQueryParams.Add("hasParentalRating", parameterToString(localVarOptionals.HasParentalRating.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsHd.IsSet() {
		localVarQueryParams.Add("isHd", parameterToString(localVarOptionals.IsHd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Is4K.IsSet() {
		localVarQueryParams.Add("is4K", parameterToString(localVarOptionals.Is4K.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LocationTypes.IsSet() {
		localVarQueryParams.Add("locationTypes", parameterToString(localVarOptionals.LocationTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeLocationTypes.IsSet() {
		t:=localVarOptionals.ExcludeLocationTypes.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("excludeLocationTypes", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("excludeLocationTypes", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.IsMissing.IsSet() {
		localVarQueryParams.Add("isMissing", parameterToString(localVarOptionals.IsMissing.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsUnaired.IsSet() {
		localVarQueryParams.Add("isUnaired", parameterToString(localVarOptionals.IsUnaired.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCommunityRating.IsSet() {
		localVarQueryParams.Add("minCommunityRating", parameterToString(localVarOptionals.MinCommunityRating.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCriticRating.IsSet() {
		localVarQueryParams.Add("minCriticRating", parameterToString(localVarOptionals.MinCriticRating.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinPremiereDate.IsSet() {
		localVarQueryParams.Add("minPremiereDate", parameterToString(localVarOptionals.MinPremiereDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinDateLastSaved.IsSet() {
		localVarQueryParams.Add("minDateLastSaved", parameterToString(localVarOptionals.MinDateLastSaved.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinDateLastSavedForUser.IsSet() {
		localVarQueryParams.Add("minDateLastSavedForUser", parameterToString(localVarOptionals.MinDateLastSavedForUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxPremiereDate.IsSet() {
		localVarQueryParams.Add("maxPremiereDate", parameterToString(localVarOptionals.MaxPremiereDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HasOverview.IsSet() {
		localVarQueryParams.Add("hasOverview", parameterToString(localVarOptionals.HasOverview.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HasImdbId.IsSet() {
		localVarQueryParams.Add("hasImdbId", parameterToString(localVarOptionals.HasImdbId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HasTmdbId.IsSet() {
		localVarQueryParams.Add("hasTmdbId", parameterToString(localVarOptionals.HasTmdbId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HasTvdbId.IsSet() {
		localVarQueryParams.Add("hasTvdbId", parameterToString(localVarOptionals.HasTvdbId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeItemIds.IsSet() {
		localVarQueryParams.Add("excludeItemIds", parameterToString(localVarOptionals.ExcludeItemIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartIndex.IsSet() {
		localVarQueryParams.Add("startIndex", parameterToString(localVarOptionals.StartIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Recursive.IsSet() {
		localVarQueryParams.Add("recursive", parameterToString(localVarOptionals.Recursive.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SearchTerm.IsSet() {
		localVarQueryParams.Add("searchTerm", parameterToString(localVarOptionals.SearchTerm.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortOrder.IsSet() {
		localVarQueryParams.Add("sortOrder", parameterToString(localVarOptionals.SortOrder.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParentId.IsSet() {
		localVarQueryParams.Add("parentId", parameterToString(localVarOptionals.ParentId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Fields.IsSet() {
		localVarQueryParams.Add("fields", parameterToString(localVarOptionals.Fields.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeItemTypes.IsSet() {
		localVarQueryParams.Add("excludeItemTypes", parameterToString(localVarOptionals.ExcludeItemTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeItemTypes.IsSet() {
		localVarQueryParams.Add("includeItemTypes", parameterToString(localVarOptionals.IncludeItemTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Filters.IsSet() {
		t:=localVarOptionals.Filters.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("filters", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("filters", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.IsFavorite.IsSet() {
		localVarQueryParams.Add("isFavorite", parameterToString(localVarOptionals.IsFavorite.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MediaTypes.IsSet() {
		localVarQueryParams.Add("mediaTypes", parameterToString(localVarOptionals.MediaTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ImageTypes.IsSet() {
		localVarQueryParams.Add("imageTypes", parameterToString(localVarOptionals.ImageTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortBy.IsSet() {
		localVarQueryParams.Add("sortBy", parameterToString(localVarOptionals.SortBy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsPlayed.IsSet() {
		localVarQueryParams.Add("isPlayed", parameterToString(localVarOptionals.IsPlayed.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Genres.IsSet() {
		localVarQueryParams.Add("genres", parameterToString(localVarOptionals.Genres.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OfficialRatings.IsSet() {
		localVarQueryParams.Add("officialRatings", parameterToString(localVarOptionals.OfficialRatings.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Tags.IsSet() {
		localVarQueryParams.Add("tags", parameterToString(localVarOptionals.Tags.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Years.IsSet() {
		localVarQueryParams.Add("years", parameterToString(localVarOptionals.Years.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EnableUserData.IsSet() {
		localVarQueryParams.Add("enableUserData", parameterToString(localVarOptionals.EnableUserData.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ImageTypeLimit.IsSet() {
		localVarQueryParams.Add("imageTypeLimit", parameterToString(localVarOptionals.ImageTypeLimit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EnableImageTypes.IsSet() {
		localVarQueryParams.Add("enableImageTypes", parameterToString(localVarOptionals.EnableImageTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Person.IsSet() {
		localVarQueryParams.Add("person", parameterToString(localVarOptionals.Person.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PersonIds.IsSet() {
		localVarQueryParams.Add("personIds", parameterToString(localVarOptionals.PersonIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PersonTypes.IsSet() {
		localVarQueryParams.Add("personTypes", parameterToString(localVarOptionals.PersonTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Studios.IsSet() {
		localVarQueryParams.Add("studios", parameterToString(localVarOptionals.Studios.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Artists.IsSet() {
		localVarQueryParams.Add("artists", parameterToString(localVarOptionals.Artists.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeArtistIds.IsSet() {
		localVarQueryParams.Add("excludeArtistIds", parameterToString(localVarOptionals.ExcludeArtistIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ArtistIds.IsSet() {
		localVarQueryParams.Add("artistIds", parameterToString(localVarOptionals.ArtistIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AlbumArtistIds.IsSet() {
		localVarQueryParams.Add("albumArtistIds", parameterToString(localVarOptionals.AlbumArtistIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ContributingArtistIds.IsSet() {
		localVarQueryParams.Add("contributingArtistIds", parameterToString(localVarOptionals.ContributingArtistIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Albums.IsSet() {
		localVarQueryParams.Add("albums", parameterToString(localVarOptionals.Albums.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AlbumIds.IsSet() {
		localVarQueryParams.Add("albumIds", parameterToString(localVarOptionals.AlbumIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Ids.IsSet() {
		localVarQueryParams.Add("ids", parameterToString(localVarOptionals.Ids.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VideoTypes.IsSet() {
		localVarQueryParams.Add("videoTypes", parameterToString(localVarOptionals.VideoTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinOfficialRating.IsSet() {
		localVarQueryParams.Add("minOfficialRating", parameterToString(localVarOptionals.MinOfficialRating.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsLocked.IsSet() {
		localVarQueryParams.Add("isLocked", parameterToString(localVarOptionals.IsLocked.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsPlaceHolder.IsSet() {
		localVarQueryParams.Add("isPlaceHolder", parameterToString(localVarOptionals.IsPlaceHolder.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HasOfficialRating.IsSet() {
		localVarQueryParams.Add("hasOfficialRating", parameterToString(localVarOptionals.HasOfficialRating.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CollapseBoxSetItems.IsSet() {
		localVarQueryParams.Add("collapseBoxSetItems", parameterToString(localVarOptionals.CollapseBoxSetItems.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinWidth.IsSet() {
		localVarQueryParams.Add("minWidth", parameterToString(localVarOptionals.MinWidth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinHeight.IsSet() {
		localVarQueryParams.Add("minHeight", parameterToString(localVarOptionals.MinHeight.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxWidth.IsSet() {
		localVarQueryParams.Add("maxWidth", parameterToString(localVarOptionals.MaxWidth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxHeight.IsSet() {
		localVarQueryParams.Add("maxHeight", parameterToString(localVarOptionals.MaxHeight.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Is3D.IsSet() {
		localVarQueryParams.Add("is3D", parameterToString(localVarOptionals.Is3D.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SeriesStatus.IsSet() {
		localVarQueryParams.Add("seriesStatus", parameterToString(localVarOptionals.SeriesStatus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NameStartsWithOrGreater.IsSet() {
		localVarQueryParams.Add("nameStartsWithOrGreater", parameterToString(localVarOptionals.NameStartsWithOrGreater.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NameStartsWith.IsSet() {
		localVarQueryParams.Add("nameStartsWith", parameterToString(localVarOptionals.NameStartsWith.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NameLessThan.IsSet() {
		localVarQueryParams.Add("nameLessThan", parameterToString(localVarOptionals.NameLessThan.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StudioIds.IsSet() {
		localVarQueryParams.Add("studioIds", parameterToString(localVarOptionals.StudioIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GenreIds.IsSet() {
		localVarQueryParams.Add("genreIds", parameterToString(localVarOptionals.GenreIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EnableTotalRecordCount.IsSet() {
		localVarQueryParams.Add("enableTotalRecordCount", parameterToString(localVarOptionals.EnableTotalRecordCount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EnableImages.IsSet() {
		localVarQueryParams.Add("enableImages", parameterToString(localVarOptionals.EnableImages.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-Emby-Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GetResumeItemsOpts Optional parameters for the method 'GetResumeItems'
type GetResumeItemsOpts struct {
    StartIndex optional.Int32
    Limit optional.Int32
    SearchTerm optional.String
    ParentId optional.String
    Fields optional.String
    MediaTypes optional.String
    EnableUserData optional.Bool
    ImageTypeLimit optional.Int32
    EnableImageTypes optional.String
    ExcludeItemTypes optional.String
    IncludeItemTypes optional.String
    EnableTotalRecordCount optional.Bool
    EnableImages optional.Bool
}

/*
GetResumeItems Gets items based on a query.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param userId The user id.
 * @param optional nil or *GetResumeItemsOpts - Optional Parameters:
 * @param "StartIndex" (optional.Int32) -  The start index.
 * @param "Limit" (optional.Int32) -  The item limit.
 * @param "SearchTerm" (optional.String) -  The search term.
 * @param "ParentId" (optional.String) -  Specify this to localize the search to a specific item or folder. Omit to use the root.
 * @param "Fields" (optional.String) -  Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.
 * @param "MediaTypes" (optional.String) -  Optional. Filter by MediaType. Allows multiple, comma delimited.
 * @param "EnableUserData" (optional.Bool) -  Optional. Include user data.
 * @param "ImageTypeLimit" (optional.Int32) -  Optional. The max number of images to return, per image type.
 * @param "EnableImageTypes" (optional.String) -  Optional. The image types to include in the output.
 * @param "ExcludeItemTypes" (optional.String) -  Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
 * @param "IncludeItemTypes" (optional.String) -  Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimeted.
 * @param "EnableTotalRecordCount" (optional.Bool) -  Optional. Enable the total record count.
 * @param "EnableImages" (optional.Bool) -  Optional. Include image information in output.
@return BaseItemDtoQueryResult
*/
func (a *ItemsApiService) GetResumeItems(ctx _context.Context, userId string, localVarOptionals *GetResumeItemsOpts) (BaseItemDtoQueryResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BaseItemDtoQueryResult
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/Users/{userId}/Items/Resume"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", _neturl.QueryEscape(parameterToString(userId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.StartIndex.IsSet() {
		localVarQueryParams.Add("startIndex", parameterToString(localVarOptionals.StartIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SearchTerm.IsSet() {
		localVarQueryParams.Add("searchTerm", parameterToString(localVarOptionals.SearchTerm.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParentId.IsSet() {
		localVarQueryParams.Add("parentId", parameterToString(localVarOptionals.ParentId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Fields.IsSet() {
		localVarQueryParams.Add("fields", parameterToString(localVarOptionals.Fields.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MediaTypes.IsSet() {
		localVarQueryParams.Add("mediaTypes", parameterToString(localVarOptionals.MediaTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EnableUserData.IsSet() {
		localVarQueryParams.Add("enableUserData", parameterToString(localVarOptionals.EnableUserData.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ImageTypeLimit.IsSet() {
		localVarQueryParams.Add("imageTypeLimit", parameterToString(localVarOptionals.ImageTypeLimit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EnableImageTypes.IsSet() {
		localVarQueryParams.Add("enableImageTypes", parameterToString(localVarOptionals.EnableImageTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeItemTypes.IsSet() {
		localVarQueryParams.Add("excludeItemTypes", parameterToString(localVarOptionals.ExcludeItemTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeItemTypes.IsSet() {
		localVarQueryParams.Add("includeItemTypes", parameterToString(localVarOptionals.IncludeItemTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EnableTotalRecordCount.IsSet() {
		localVarQueryParams.Add("enableTotalRecordCount", parameterToString(localVarOptionals.EnableTotalRecordCount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EnableImages.IsSet() {
		localVarQueryParams.Add("enableImages", parameterToString(localVarOptionals.EnableImages.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-Emby-Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
